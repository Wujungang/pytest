{"name": "test_a", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not CaseInsensitiveDict", "trace": "self = <Test_App7.Test_ABC object at 0x07D89390>\n\n    def test_a(self):\n        headers = {\n            \"Content-Type\":\"application/json\",\n            \"x-okapi-tenant\":\"l001736\"\n        }\n        data = {\n            \"username\": \"administrator\",\n            \"password\": \"letmein\"\n        }\n        data = json.dumps(data)\n        res = requests.post(\"http://39.106.33.252/okapia/bl-users/login\",data=data,headers = headers)\n        # print(res.text)\n        print(res.headers)\n>       headers = json.loads(res.headers)\n\nTest_App7.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = {'Server': 'nginx/1.4.2', 'Date': 'Wed, 14 Oct 2020 08:43:41 GMT', 'Content-Type': 'application/json', 'Transfer-Encod...od': 'POST', 'x-okapi-permissions': '[]', 'x-okapi-match-path-pattern': '/bl-users/login', 'Cache-Control': 'no-cache'}\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not CaseInsensitiveDict\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\json\\__init__.py:341: TypeError"}, "start": 1602665022319, "stop": 1602665022433, "uuid": "3de1332c-5794-4609-b4a6-13c06db4bcf5", "historyId": "58b5a1408927d284cfaee776d28ad0c3", "testCaseId": "fad9b2312adfc42fba574fe1d079cd24", "fullName": "clsp.Test_App7.Test_ABC#test_a", "labels": [{"name": "parentSuite", "value": "clsp"}, {"name": "suite", "value": "Test_App7"}, {"name": "subSuite", "value": "Test_ABC"}, {"name": "host", "value": "LAPTOP-LFNOOUSC"}, {"name": "thread", "value": "12280-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "clsp.Test_App7"}]}